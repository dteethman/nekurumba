import UIKit
import DTBunchOfExt

class OnboardingViewController: UIViewController, UIScrollViewDelegate {
    //MARK: - Variables
    private let defaults = UserDefaults.standard
    
    private var scrollView: UIScrollView!
    private var pageControl: UIPageControl!
    private var intervalButton: NMButton!
    
    private let onboardingDataArray: [(titleText: String, emoji: String, shortDesc: String, fullDesc: String)] = [
        (
            titleText: "–ß—Ç–æ —Ç–∞–∫–æ–µ –ù–µ–∫—É—Ä—ë–º–±–∞?",
            emoji: "ü§î",
            shortDesc: "–ù–µ–∫—É—Ä–µ–º–±–∞¬†‚Äî —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è –∫–∞–∫ –∫—É—Ä–∏–ª—å—â–∏–∫–∞.",
            fullDesc: """
–û–Ω–æ —Å–æ–±–µ—Ä–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ¬†–∫—É—Ä–µ–Ω–∏–∏, –ø–æ–∫–∞–∂–µ—Ç –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –∏¬†–∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã¬†–∫—É—Ä–∏—Ç–µ –≤¬†—Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å¬†–≤—á–µ—Ä–∞—à–Ω–∏–º –¥–Ω–µ–º, –Ω–µ–¥–µ–ª–µ–π –∏¬†–º–µ—Å—è—Ü–µ–º. –ê¬†–≤—ã¬†—Å–¥–µ–ª–∞–µ—Ç–µ –≤—ã–≤–æ–¥—ã.

–ù–µ–∫—É—Ä–µ–º–±–∞ –Ω–µ¬†–±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –≤–∞–º, —Å–∫–æ–ª—å–∫–æ —Å–ª–µ–¥—É–µ—Ç –∫—É—Ä–∏—Ç—å, –∏¬†—É—á–∏—Ç—å –≤–∞—Å –∂–∏—Ç—å. –ö—É—Ä–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç¬†‚Äî —Ä–µ—à–∞—Ç—å –≤–∞–º.
"""
        ),
        (
            titleText: "–°—á–∏—Ç–∞–π—Ç–µ —Å–∏–≥–∞—Ä–µ—Ç—ã",
            emoji: "üö¨",
            shortDesc: "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞¬†—Å–∏–≥–∞—Ä–µ—Ç—É –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –∫—É—Ä–∏—Ç–µ.",
            fullDesc: """
–ù–µ–∫—É—Ä—ë–º–±–∞ —Å–æ–±–µ—Ä–µ—Ç –∏¬†–ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

–ï—Å–ª–∏ –≤—ã¬†–±—É–¥–µ—Ç–µ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ–∫—É—Ä–µ, —É¬†–≤–∞—Å –±—É–¥—É—Ç –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.

–ù–∞–∂–∞—Ç—å –º–æ–∂–Ω–æ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞ –∏–¥–µ—Ç –≤—Ä–µ–º—è. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ¬†‚Äî –Ω–µ¬†—á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤¬†–º–∏–Ω—É—Ç—É.
"""
        ),
        (
            titleText: "–î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤",
            emoji: "‚åõ",
            shortDesc: "–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª—å –∏¬†—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –µ–µ¬†–≤—ã–ø–æ–ª–Ω–∏—Ç—å.",
            fullDesc: """
–ù–µ–∫—É—Ä—ë–º–±–∞ –Ω–µ¬†–º–æ–∂–µ—Ç –∑–∞—Å—Ç–∞–≤–∏—Ç—å –≤–∞—Å –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∫—É—Ä–∞–º–∏, –ª–∏—à—å –ø–æ–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ.

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ—Ä—ã–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2¬†—á–∞—Å–∞, –Ω–æ¬†–≤—ã¬†–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –≤¬†–ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤¬†–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
"""
        ),
        (
            titleText: "–í—Å–µ –≥–æ—Ç–æ–≤–æ",
            emoji: "üëå",
            shortDesc: "–ù–∞—á–Ω–∏—Ç–µ –¥–µ—Ä–∂–∞—Ç—å –∫—É—Ä–µ–Ω–∏–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            fullDesc: """
–ò¬†–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ù–µ–∫—É—Ä—ë–º–±–∞¬†‚Äî —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —á–µ—Å—Ç–Ω—ã—Ö —Å¬†—Å–∞–º–∏–º —Å–æ–±–æ–π.

–ê¬†–≤–æ–æ–±—â–µ¬†‚Äî –∫—É—Ä–∏—Ç—å –ø–ª–æ—Ö–æ!
"""
        )
    ]
    
    private var onboardingViews: [OnboardingView] = []
    private var buttonsArray: [NMButton] = []
    
    private var screenWidth: CGFloat = 0

    //MARK: - ViewController Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = colorForMode(bgColors, isDarkMode: isDarkMode)
        
        defaults.setValue(true, forKey: isCountdownKey)
        defaults.setValue(2, forKey: intervalHoursKey)
        
        setupViews()
        setupButtons()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    
    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        self.view.backgroundColor = colorForMode(bgColors, isDarkMode: isDarkMode)
        pageControl?.pageIndicatorTintColor = colorForMode(secondaryLabelColors, isDarkMode: isDarkMode)
        pageControl?.currentPageIndicatorTintColor = colorForMode(bgColors, isDarkMode: isDarkMode)
        
    }
    
    //MARK: - Layout
    func setupViews() {
        let safeGuide = view.safeAreaLayoutGuide
        
        scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.delegate = self
        scrollView.isPagingEnabled = true
        scrollView.showsHorizontalScrollIndicator = false
        scrollView.showsVerticalScrollIndicator = false
        self.view.addSubview(scrollView)
        
        pageControl = UIPageControl()
        pageControl.translatesAutoresizingMaskIntoConstraints = false
        pageControl.numberOfPages = onboardingDataArray.count
        pageControl.currentPage = 0
        pageControl.pageIndicatorTintColor = colorForMode(secondaryLabelColors, isDarkMode: isDarkMode)
        pageControl.currentPageIndicatorTintColor = colorForMode(bgColors, isDarkMode: isDarkMode)
        pageControl.isUserInteractionEnabled = false
        self.view.addSubview(pageControl)
        
        NSLayoutConstraint.activate([
            pageControl.bottomAnchor.constraint(equalTo: safeGuide.bottomAnchor, constant: -19),
            pageControl.leadingAnchor.constraint(equalTo: safeGuide.leadingAnchor),
            pageControl.trailingAnchor.constraint(equalTo: safeGuide.trailingAnchor),
            pageControl.heightAnchor.constraint(equalToConstant: 20),
            
            scrollView.topAnchor.constraint(equalTo: safeGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: safeGuide.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: safeGuide.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: pageControl.topAnchor),
            
        ])
        
        screenWidth = UIScreen.main.bounds.width
        
        for ind in 0 ..< onboardingDataArray.count {
            let v = OnboardingView(frame: .zero, data: onboardingDataArray[ind])
            v.translatesAutoresizingMaskIntoConstraints = false
            v.bgColors = bgColors
            v.backgroundColor = .red
            scrollView.addSubview(v)
            onboardingViews.append(v)
            
            
            if ind == 0 {
                NSLayoutConstraint.activate([
                    v.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 0),
                    v.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: 0),
                    v.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 0),
                    v.widthAnchor.constraint(equalToConstant: screenWidth)
                ])
            } else if ind == onboardingDataArray.count - 1 {
                NSLayoutConstraint.activate([
                    v.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 0),
                    v.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: 0),
                    v.leadingAnchor.constraint(equalTo: onboardingViews[ind - 1].trailingAnchor),
                    v.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
                    v.widthAnchor.constraint(equalToConstant: screenWidth)
                ])
            } else {
                NSLayoutConstraint.activate([
                    v.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 0),
                    v.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: 0),
                    v.leadingAnchor.constraint(equalTo: onboardingViews[ind - 1].trailingAnchor),
                    v.widthAnchor.constraint(equalToConstant: screenWidth)
                ])
            }
            
        }
    }
    
    func setupButtons() {
        for view in  onboardingViews {
            let button = NMButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.bgColors = bgColors
            button.cornerRadius = 15
            button.titleLabel.textColor = activeColor
            button.titleLabel.textAlignment = .center
            button.titleLabel.font = .systemFont(ofSize: 17)
            self.scrollView.addSubview(button)
            buttonsArray.append(button)
            
            NSLayoutConstraint.activate([
                button.bottomAnchor.constraint(equalTo: pageControl.topAnchor, constant: -15),
                button.centerXAnchor.constraint(equalTo: view.centerXAnchor),
                button.widthAnchor.constraint(equalToConstant: 190),
                button.heightAnchor.constraint(equalToConstant: 40),
            ])
        }
        
        buttonsArray[0].titleLabel.text = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        buttonsArray[1].titleLabel.text = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        buttonsArray[2].titleLabel.text = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        buttonsArray[3].titleLabel.text = "–ù–∞—á–∞—Ç—å"
        
        intervalButton = NMButton()
        intervalButton.translatesAutoresizingMaskIntoConstraints = false
        intervalButton.bgColors = bgColors
        intervalButton.cornerRadius = 15
        intervalButton.titleLabel.textColor = activeColor
        intervalButton.titleLabel.textAlignment = .center
        intervalButton.titleLabel.text = "–ü–æ–º–µ–Ω—è—Ç—å"
        intervalButton.titleLabel.font = .systemFont(ofSize: 17)
        self.scrollView.addSubview(intervalButton)
        
        NSLayoutConstraint.activate([
            intervalButton.bottomAnchor.constraint(equalTo: buttonsArray[2].topAnchor, constant: -20),
            intervalButton.centerXAnchor.constraint(equalTo: buttonsArray[2].centerXAnchor),
            intervalButton.widthAnchor.constraint(equalToConstant: 190),
            intervalButton.heightAnchor.constraint(equalToConstant: 40),
        ])
        
        buttonsArray[0].addAction(for: .touchUpInside, action: {
            self.scrollToPage(page: 1, animated: true)
        })
        
        buttonsArray[1].addAction(for: .touchUpInside, action: {
            self.scrollToPage(page: 2, animated: true)
        })
        
        buttonsArray[2].addAction(for: .touchUpInside, action: {
            self.scrollToPage(page: 3, animated: true)
        })
        
        buttonsArray[3].addAction(for: .touchUpInside, action: {
            self.dismiss(animated: true) {
                self.defaults.setValue(true, forKey: userDidOnboardingKey)
            }
        })
        
        intervalButton.addAction(for: .touchUpInside, action: {
            let presentingController = IntervalChangerViewController()
            self.navigationController?.pushViewController(presentingController, animated: true)
        })
        
    }

    //MARK: - ScrollView methods
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        setIndiactorForCurrentPage()
    }

    func scrollToPage(page: Int, animated: Bool) {
        scrollView.setContentOffset(CGPoint(x: screenWidth * CGFloat(page), y: 0), animated: true)
    }
    
    //MARK: - PageControll methods
    func setIndiactorForCurrentPage()  {
        let page = (scrollView?.contentOffset.x)!/screenWidth
        pageControl?.currentPage = Int(page)
    }
    
    

}
